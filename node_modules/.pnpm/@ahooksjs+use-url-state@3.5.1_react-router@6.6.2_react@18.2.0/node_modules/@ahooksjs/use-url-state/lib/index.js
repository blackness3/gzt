"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ahooks = require("ahooks");
var _queryString = require("query-string");
var _react = require("react");
var tmp = _interopRequireWildcard(require("react-router"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// ignore waring `"export 'useNavigate' (imported as 'rc') was not found in 'react-router'`
var rc = tmp;
var baseParseConfig = {
  parseNumbers: false,
  parseBooleans: false
};
var baseStringifyConfig = {
  skipNull: false,
  skipEmptyString: false
};
var useUrlState = function useUrlState(initialState, options) {
  var _a, _b;
  var _ref = options || {},
    _ref$navigateMode = _ref.navigateMode,
    navigateMode = _ref$navigateMode === void 0 ? 'push' : _ref$navigateMode,
    parseOptions = _ref.parseOptions,
    stringifyOptions = _ref.stringifyOptions;
  var mergedParseOptions = Object.assign(Object.assign({}, baseParseConfig), parseOptions);
  var mergedStringifyOptions = Object.assign(Object.assign({}, baseStringifyConfig), stringifyOptions);
  var location = rc.useLocation();
  // react-router v5
  var history = (_a = rc.useHistory) === null || _a === void 0 ? void 0 : _a.call(rc);
  // react-router v6
  var navigate = (_b = rc.useNavigate) === null || _b === void 0 ? void 0 : _b.call(rc);
  var update = (0, _ahooks.useUpdate)();
  var initialStateRef = (0, _react.useRef)(typeof initialState === 'function' ? initialState() : initialState || {});
  var queryFromUrl = (0, _react.useMemo)(function () {
    return (0, _queryString.parse)(location.search, mergedParseOptions);
  }, [location.search]);
  var targetQuery = (0, _react.useMemo)(function () {
    return Object.assign(Object.assign({}, initialStateRef.current), queryFromUrl);
  }, [queryFromUrl]);
  var setState = function setState(s) {
    var newQuery = typeof s === 'function' ? s(targetQuery) : s;
    // 1. 如果 setState 后，search 没变化，就需要 update 来触发一次更新。比如 demo1 直接点击 clear，就需要 update 来触发更新。
    // 2. update 和 history 的更新会合并，不会造成多次更新
    update();
    if (history) {
      history[navigateMode]({
        hash: location.hash,
        search: (0, _queryString.stringify)(Object.assign(Object.assign({}, queryFromUrl), newQuery), mergedStringifyOptions) || '?'
      }, location.state);
    }
    if (navigate) {
      navigate({
        hash: location.hash,
        search: (0, _queryString.stringify)(Object.assign(Object.assign({}, queryFromUrl), newQuery), mergedStringifyOptions) || '?'
      }, {
        replace: navigateMode === 'replace',
        state: location.state
      });
    }
  };
  return [targetQuery, (0, _ahooks.useMemoizedFn)(setState)];
};
var _default = useUrlState;
exports["default"] = _default;