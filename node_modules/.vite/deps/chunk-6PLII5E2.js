import {
  Typography_default,
  init_Typography
} from "./chunk-C67TEYHN.js";
import {
  init_useForkRef,
  init_useIsFocusVisible,
  useForkRef_default,
  useIsFocusVisible_default
} from "./chunk-QCCPCOXY.js";
import {
  capitalize_default,
  init_capitalize
} from "./chunk-6RGBACQP.js";
import {
  init_base
} from "./chunk-FW7XUO3N.js";
import {
  alpha,
  composeClasses,
  elementTypeAcceptingRef_default,
  generateUtilityClass,
  generateUtilityClasses,
  getPath,
  init_esm,
  init_esm2,
  init_generateUtilityClass,
  init_styled,
  init_useThemeProps,
  styled_default,
  useThemeProps2 as useThemeProps
} from "./chunk-JZHFBPOR.js";
import {
  require_prop_types
} from "./chunk-7SDWSBA6.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-463IUOES.js";
import {
  require_jsx_runtime
} from "./chunk-DOX2A7CZ.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-3A2PB45J.js";
import {
  _extends,
  init_extends
} from "./chunk-LHD2FDYG.js";
import {
  require_react
} from "./chunk-QSTP2CRO.js";
import {
  __esm,
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/.pnpm/@mui+material@5.11.4_@emotion+react@11.10.5_@emotion+styled@11.10.5_@types+react@18.0.26_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/Link/linkClasses.js
function getLinkUtilityClass(slot) {
  return generateUtilityClass("MuiLink", slot);
}
var linkClasses, linkClasses_default;
var init_linkClasses = __esm({
  "node_modules/.pnpm/@mui+material@5.11.4_@emotion+react@11.10.5_@emotion+styled@11.10.5_@types+react@18.0.26_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/Link/linkClasses.js"() {
    init_esm();
    init_generateUtilityClass();
    linkClasses = generateUtilityClasses("MuiLink", ["root", "underlineNone", "underlineHover", "underlineAlways", "button", "focusVisible"]);
    linkClasses_default = linkClasses;
  }
});

// node_modules/.pnpm/@mui+material@5.11.4_@emotion+react@11.10.5_@emotion+styled@11.10.5_@types+react@18.0.26_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/Link/getTextDecoration.js
var colorTransformations, transformDeprecatedColors, getTextDecoration, getTextDecoration_default;
var init_getTextDecoration = __esm({
  "node_modules/.pnpm/@mui+material@5.11.4_@emotion+react@11.10.5_@emotion+styled@11.10.5_@types+react@18.0.26_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/Link/getTextDecoration.js"() {
    init_esm2();
    colorTransformations = {
      primary: "primary.main",
      textPrimary: "text.primary",
      secondary: "secondary.main",
      textSecondary: "text.secondary",
      error: "error.main"
    };
    transformDeprecatedColors = (color) => {
      return colorTransformations[color] || color;
    };
    getTextDecoration = ({
      theme,
      ownerState
    }) => {
      const transformedColor = transformDeprecatedColors(ownerState.color);
      const color = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;
      const channelColor = getPath(theme, `palette.${transformedColor}Channel`);
      if ("vars" in theme && channelColor) {
        return `rgba(${channelColor} / 0.4)`;
      }
      return alpha(color, 0.4);
    };
    getTextDecoration_default = getTextDecoration;
  }
});

// node_modules/.pnpm/@mui+material@5.11.4_@emotion+react@11.10.5_@emotion+styled@11.10.5_@types+react@18.0.26_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/Link/Link.js
var React, import_prop_types, import_jsx_runtime, _excluded, useUtilityClasses, LinkRoot, Link, Link_default;
var init_Link = __esm({
  "node_modules/.pnpm/@mui+material@5.11.4_@emotion+react@11.10.5_@emotion+styled@11.10.5_@types+react@18.0.26_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/Link/Link.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx_m();
    init_esm();
    init_base();
    init_capitalize();
    init_styled();
    init_useThemeProps();
    init_useIsFocusVisible();
    init_useForkRef();
    init_Typography();
    init_linkClasses();
    init_getTextDecoration();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    _excluded = ["className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant", "sx"];
    useUtilityClasses = (ownerState) => {
      const {
        classes,
        component,
        focusVisible,
        underline
      } = ownerState;
      const slots = {
        root: ["root", `underline${capitalize_default(underline)}`, component === "button" && "button", focusVisible && "focusVisible"]
      };
      return composeClasses(slots, getLinkUtilityClass, classes);
    };
    LinkRoot = styled_default(Typography_default, {
      name: "MuiLink",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[`underline${capitalize_default(ownerState.underline)}`], ownerState.component === "button" && styles.button];
      }
    })(({
      theme,
      ownerState
    }) => {
      return _extends({}, ownerState.underline === "none" && {
        textDecoration: "none"
      }, ownerState.underline === "hover" && {
        textDecoration: "none",
        "&:hover": {
          textDecoration: "underline"
        }
      }, ownerState.underline === "always" && _extends({
        textDecoration: "underline"
      }, ownerState.color !== "inherit" && {
        textDecorationColor: getTextDecoration_default({
          theme,
          ownerState
        })
      }, {
        "&:hover": {
          textDecorationColor: "inherit"
        }
      }), ownerState.component === "button" && {
        position: "relative",
        WebkitTapHighlightColor: "transparent",
        backgroundColor: "transparent",
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: "pointer",
        userSelect: "none",
        verticalAlign: "middle",
        MozAppearance: "none",
        // Reset
        WebkitAppearance: "none",
        // Reset
        "&::-moz-focus-inner": {
          borderStyle: "none"
          // Remove Firefox dotted outline.
        },
        [`&.${linkClasses_default.focusVisible}`]: {
          outline: "auto"
        }
      });
    });
    Link = React.forwardRef(function Link2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiLink"
      });
      const {
        className,
        color = "primary",
        component = "a",
        onBlur,
        onFocus,
        TypographyClasses,
        underline = "always",
        variant = "inherit",
        sx
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const {
        isFocusVisibleRef,
        onBlur: handleBlurVisible,
        onFocus: handleFocusVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible_default();
      const [focusVisible, setFocusVisible] = React.useState(false);
      const handlerRef = useForkRef_default(ref, focusVisibleRef);
      const handleBlur = (event) => {
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setFocusVisible(false);
        }
        if (onBlur) {
          onBlur(event);
        }
      };
      const handleFocus = (event) => {
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setFocusVisible(true);
        }
        if (onFocus) {
          onFocus(event);
        }
      };
      const ownerState = _extends({}, props, {
        color,
        component,
        focusVisible,
        underline,
        variant
      });
      const classes = useUtilityClasses(ownerState);
      return (0, import_jsx_runtime.jsx)(LinkRoot, _extends({
        color,
        className: clsx_m_default(classes.root, className),
        classes: TypographyClasses,
        component,
        onBlur: handleBlur,
        onFocus: handleFocus,
        ref: handlerRef,
        ownerState,
        variant,
        sx: [...!Object.keys(colorTransformations).includes(color) ? [{
          color
        }] : [], ...Array.isArray(sx) ? sx : [sx]]
      }, other));
    });
    true ? Link.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: import_prop_types.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types.default.object,
      /**
       * @ignore
       */
      className: import_prop_types.default.string,
      /**
       * The color of the link.
       * @default 'primary'
       */
      color: import_prop_types.default.any,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: elementTypeAcceptingRef_default,
      /**
       * @ignore
       */
      onBlur: import_prop_types.default.func,
      /**
       * @ignore
       */
      onFocus: import_prop_types.default.func,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
      /**
       * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.
       */
      TypographyClasses: import_prop_types.default.object,
      /**
       * Controls when the link should have an underline.
       * @default 'always'
       */
      underline: import_prop_types.default.oneOf(["always", "hover", "none"]),
      /**
       * Applies the theme typography styles.
       * @default 'inherit'
       */
      variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types.default.string])
    } : void 0;
    Link_default = Link;
  }
});

// node_modules/.pnpm/@mui+material@5.11.4_@emotion+react@11.10.5_@emotion+styled@11.10.5_@types+react@18.0.26_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/Link/index.js
var init_Link2 = __esm({
  "node_modules/.pnpm/@mui+material@5.11.4_@emotion+react@11.10.5_@emotion+styled@11.10.5_@types+react@18.0.26_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/Link/index.js"() {
    init_Link();
    init_linkClasses();
    init_linkClasses();
  }
});

export {
  getLinkUtilityClass,
  linkClasses_default,
  Link_default,
  init_Link2 as init_Link
};
//# sourceMappingURL=chunk-6PLII5E2.js.map
